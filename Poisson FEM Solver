from google.colab import files

import platform, sys
python_version=platform.python_version()
from distutils.version import LooseVersion, StrictVersion

if ( LooseVersion(python_version) < LooseVersion("3.0.0")):
    print("Python3 is needed!");
    print("How to fix: Runtime/Change_runtime_type/Python 3");
    sys.exit()
    
try:
    from dolfin import *; from mshr import *
except ImportError as e:
    !apt-get install -y -qq software-properties-common python-software-properties module-init-tools
    !add-apt-repository -y ppa:fenics-packages/fenics
    !apt-get update -qq
    !apt install -y --no-install-recommends fenics
    from dolfin import *; from mshr import *
    
import matplotlib.pyplot as plt;
from IPython.display import clear_output, display; import time; import dolfin.common.plotting as fenicsplot 
import time

import os, sys, shutil

dolfin_version = dolfin.__version__
print ('dolfin version:', dolfin_version)

!rm -rf * # clean up all files
# Useful commands
# Remove an empty folder      : os.rmdir("my_results")
# Remove a folder with files  : shutil.rmtree("results")
# Make a folder               : os.mkdir("my_results")
# Runtime/Change_runtime_type/Python3



from fenics import *

mesh=UnitSquareMesh(32,32)
plot(mesh)

V=FunctionSpace(mesh,'P',1) #remember 1 means linear elements, 2 means quadratic elements, 3-cubic

#Define Dirichlet boundary (x=0 or x=1)
def boundary(x): 
  return x[0] < DOLFIN_EPS or x[0]>1.0-DOLFIN_EPS
  
  #Define Boundary Conditions
u0=Constant(0.0)
bc=DirichletBC(V,u0,boundary)

#define variational problem
u = TrialFunction(V)
v = TestFunction(V)
f = Expression("10*exp(-(pow(x[0] - 0.5, 2) + pow(x[1] - 0.5, 2)) / 0.02)", degree=2)
g = Expression("sin(5*x[0])", degree=2)
a = inner(grad(u), grad(v))*dx
L = f*v*dx + g*v*ds

#Now complete solution
u=Function(V)
solve(a==L,u,bc)

file=File("poisson.pvd")
file << u

#plot

plot(u,interactive="True", title="Solution u(x,y)")

plot(grad(u), title="grad(u)")
  
